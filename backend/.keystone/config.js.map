{
  "version": 3,
  "sources": ["../keystone.ts", "../auth.ts", "../schema.ts", "../utils.ts"],
  "sourcesContent": ["// This file is what Keystone uses as the entry-point to your headless backend\r\n//\r\n// Keystone imports the default export of this file, expecting a Keystone configuration object\r\n//   you can find out more at https://keystonejs.com/docs/apis/config\r\n\r\nimport dotenv from \"dotenv\";\r\n\r\nimport { config } from \"@keystone-6/core\";\r\n\r\nimport { session, withAuth } from \"./auth\";\r\nimport { lists } from \"./schema\";\r\n\r\ndotenv.config();\r\n\r\n// import { StorageConfig } from \"@keystone-6/core/types\";\r\n\r\nconst {\r\n\t// DATABASE_URL: databaseUrl = \"\",\r\n\t// S3_BUCKET_NAME: bucketName = \"\",\r\n\t// S3_REGION: region = \"\",\r\n\t// S3_ACCESS_KEY_ID: accessKeyId = \"\",\r\n\t// S3_SECRET_ACCESS_KEY: secretAccessKey = \"\",\r\n\t// S3_ENDPOINT: endpoint = \"\",\r\n\t// S3_CDN_URL: cdnUrl = \"\",\r\n\tFRONTEND_URL: frontendUrl = \"http://localhost:5173\",\r\n\tBACKEND_BASE_URL: baseUrl = \"http://localhost:3000\",\r\n} = process.env;\r\n\r\n// ! If this app needs to scale, use this:\r\n// const defaultStorage: StorageConfig = {\r\n// \tkind: \"s3\",\r\n// \ttype: \"file\",\r\n// \tbucketName,\r\n// \tregion,\r\n// \taccessKeyId,\r\n// \tsecretAccessKey,\r\n// \tendpoint,\r\n// \tgenerateUrl: (path: string) => {\r\n// \t\tconst pathname = new URL(path).pathname;\r\n// \t\treturn `${cdnUrl}${pathname}`;\r\n// \t},\r\n// \tacl: \"public-read\",\r\n// };\r\n\r\nexport default withAuth(\r\n\tconfig({\r\n\t\tdb: {\r\n\t\t\tprovider: \"sqlite\",\r\n\t\t\turl: \"file:./db/keystone.db\",\r\n\t\t\t// provider: \"mysql\",\r\n\t\t\t// url: databaseUrl,\r\n\t\t\t// additionalPrismaDatasourceProperties: {\r\n\t\t\t// \trelationMode: \"prisma\",\r\n\t\t\t// },\r\n\t\t},\r\n\t\tserver: {\r\n\t\t\tcors: {\r\n\t\t\t\torigin: frontendUrl,\r\n\t\t\t},\r\n\t\t},\r\n\t\tlists,\r\n\t\tsession,\r\n\t\tstorage: {\r\n\t\t\tsongs: {\r\n\t\t\t\tkind: \"local\",\r\n\t\t\t\ttype: \"file\",\r\n\t\t\t\tgenerateUrl: (path) => `${baseUrl}/mixtapes${path}`,\r\n\t\t\t\tserverRoute: {\r\n\t\t\t\t\tpath: \"/mixtapes\",\r\n\t\t\t\t},\r\n\t\t\t\tstoragePath: \"public/songs\",\r\n\t\t\t},\r\n\t\t\timages: {\r\n\t\t\t\tkind: \"local\",\r\n\t\t\t\ttype: \"image\",\r\n\t\t\t\tgenerateUrl: (path) => `${baseUrl}/images${path}`,\r\n\t\t\t\tserverRoute: {\r\n\t\t\t\t\tpath: \"/images\",\r\n\t\t\t\t},\r\n\t\t\t\tstoragePath: \"public/images\",\r\n\t\t\t},\r\n\t\t\t// songs: defaultStorage,\r\n\t\t\t// images: { ...defaultStorage, type: \"image\" },\r\n\t\t},\r\n\t})\r\n);\r\n", "// Welcome to some authentication for Keystone\r\n//\r\n// This is using @keystone-6/auth to add the following\r\n// - A sign-in page for your Admin UI\r\n// - A cookie-based stateless session strategy\r\n//    - Using a User email as the identifier\r\n//    - 30 day cookie expiration\r\n//\r\n// This file does not configure what Users can do, and the default for this starter\r\n// project is to allow anyone - logged-in or not - to do anything.\r\n//\r\n// If you want to prevent random people on the internet from accessing your data,\r\n// you can find out how by reading https://keystonejs.com/docs/guides/auth-and-access-control\r\n//\r\n// If you want to learn more about how our out-of-the-box authentication works, please\r\n// read https://keystonejs.com/docs/apis/auth#authentication-api\r\n\r\n// import { randomBytes } from \"crypto\";\r\nimport { createAuth } from \"@keystone-6/auth\";\r\n\r\n// see https://keystonejs.com/docs/apis/session for the session docs\r\nimport { statelessSessions } from \"@keystone-6/core/session\";\r\n\r\n// for a stateless session, a SESSION_SECRET should always be provided\r\n//   especially in production (statelessSessions will throw if SESSION_SECRET is undefined)\r\nlet sessionSecret = process.env.SESSION_SECRET;\r\n// if (!sessionSecret && process.env.NODE_ENV !== \"production\") {\r\n// \tsessionSecret = randomBytes(32).toString(\"hex\");\r\n// }\r\n\r\n// withAuth is a function we can use to wrap our base configuration\r\nconst { withAuth } = createAuth({\r\n\tlistKey: \"User\",\r\n\tidentityField: \"email\",\r\n\r\n\t// this is a GraphQL query fragment for fetching what data will be attached to a context.session\r\n\t//   this can be helpful for when you are writing your access control functions\r\n\t//   you can find out more at https://keystonejs.com/docs/guides/auth-and-access-control\r\n\tsessionData: \"name createdAt isAdmin\",\r\n\tsecretField: \"password\",\r\n\r\n\t// WARNING: remove initFirstItem functionality in production\r\n\t//   see https://keystonejs.com/docs/config/auth#init-first-item for more\r\n\tinitFirstItem: {\r\n\t\t// if there are no items in the database, by configuring this field\r\n\t\t//   you are asking the Keystone AdminUI to create a new user\r\n\t\t//   providing inputs for these fields\r\n\t\tfields: [\"name\", \"email\", \"password\", \"isAdmin\"],\r\n\r\n\t\t// it uses context.sudo() to do this, which bypasses any access control you might have\r\n\t\t//   you shouldn't use this in production\r\n\t},\r\n});\r\n\r\n// statelessSessions uses cookies for session tracking\r\n//   these cookies have an expiry, in seconds\r\n//   we use an expiry of 30 days for this starter\r\nconst sessionMaxAge = 60 * 60 * 24 * 30;\r\n\r\n// you can find out more at https://keystonejs.com/docs/apis/session#session-api\r\nconst session = statelessSessions({\r\n\tmaxAge: sessionMaxAge,\r\n\tsecret: sessionSecret!,\r\n});\r\n\r\nexport { withAuth, session };\r\n", "// This file is where we define the lists, fields and hooks for our data.\r\n// If you want to learn more about how lists are configured, please read\r\n// - https://keystonejs.com/docs/config/lists\r\n\r\nimport { list } from \"@keystone-6/core\";\r\nimport { allowAll } from \"@keystone-6/core/access\";\r\nimport {\r\n\tcheckbox,\r\n\tfile,\r\n\tfloat,\r\n\timage,\r\n\tpassword,\r\n\trelationship,\r\n\ttext,\r\n} from \"@keystone-6/core/fields\";\r\nimport { document } from \"@keystone-6/fields-document\";\r\n\r\nimport { createdAtNowField, isAdmin } from \"./utils\";\r\n\r\nimport type { Lists } from \".keystone/types\";\r\nexport const lists: Lists = {\r\n\tUser: list({\r\n\t\taccess: isAdmin,\r\n\r\n\t\tfields: {\r\n\t\t\tname: text({ validation: { isRequired: true } }),\r\n\r\n\t\t\temail: text({\r\n\t\t\t\tvalidation: { isRequired: true },\r\n\t\t\t\tisIndexed: \"unique\",\r\n\t\t\t}),\r\n\r\n\t\t\tpassword: password({ validation: { isRequired: true } }),\r\n\r\n\t\t\tisAdmin: checkbox(),\r\n\r\n\t\t\tcreatedAt: createdAtNowField as any,\r\n\t\t},\r\n\t}),\r\n\r\n\tSong: list({\r\n\t\taccess: {\r\n\t\t\toperation: {\r\n\t\t\t\tquery: allowAll,\r\n\t\t\t\tcreate: isAdmin,\r\n\t\t\t\tupdate: isAdmin,\r\n\t\t\t\tdelete: isAdmin,\r\n\t\t\t},\r\n\t\t},\r\n\r\n\t\tui: {\r\n\t\t\tlabelField: \"title\",\r\n\t\t},\r\n\r\n\t\tfields: {\r\n\t\t\t// sku: text({\r\n\t\t\t// \tvalidation: { isRequired: true },\r\n\t\t\t// \tisIndexed: \"unique\",\r\n\t\t\t// }),\r\n\t\t\ttitle: text({ validation: { isRequired: true } }),\r\n\t\t\t// price: float({ validation: { isRequired: true } }),\r\n\t\t\tdatePosted: text({ validation: { isRequired: true } }),\r\n\r\n\t\t\tthumbnail: image({ storage: \"images\" }),\r\n\r\n\t\t\tsongPreview: file({ storage: \"songs\" }),\r\n\r\n\t\t\tcreatedAt: createdAtNowField as any,\r\n\t\t},\r\n\t}),\r\n\r\n\t// HomePage: list({\r\n\t// \taccess: {\r\n\t// \t\toperation: {\r\n\t// \t\t\tquery: allowAll,\r\n\t// \t\t\tcreate: isAdmin,\r\n\t// \t\t\tupdate: isAdmin,\r\n\t// \t\t\tdelete: isAdmin,\r\n\t// \t\t},\r\n\t// \t},\r\n\r\n\t// \tisSingleton: true,\r\n\r\n\t// \tfields: {\r\n\t// \t\tsplash: image({ storage: \"images\" }),\r\n\t// \t\tsplashPortrait: image({ storage: \"images\" }),\r\n\t// \t},\r\n\t// }),\r\n\r\n\tSongsPage: list({\r\n\t\taccess: {\r\n\t\t\toperation: {\r\n\t\t\t\tquery: allowAll,\r\n\t\t\t\tcreate: isAdmin,\r\n\t\t\t\tupdate: isAdmin,\r\n\t\t\t\tdelete: isAdmin,\r\n\t\t\t},\r\n\t\t},\r\n\r\n\t\tisSingleton: true,\r\n\r\n\t\tfields: {\r\n\t\t\t// header: text(),\r\n\t\t\ttextBlock: document({\r\n\t\t\t\tformatting: true,\r\n\t\t\t\tlinks: true,\r\n\t\t\t\tdividers: true,\r\n\t\t\t}),\r\n\t\t\tprofilePicture: image({ storage: \"images\" }),\r\n\t\t\tfeaturedHeader: text(),\r\n\t\t\tfeaturedSongs: relationship({\r\n\t\t\t\tref: \"Song\",\r\n\t\t\t\tmany: true,\r\n\t\t\t}),\r\n\t\t},\r\n\t}),\r\n\r\n\tAboutPage: list({\r\n\t\taccess: {\r\n\t\t\toperation: {\r\n\t\t\t\tquery: allowAll,\r\n\t\t\t\tcreate: isAdmin,\r\n\t\t\t\tupdate: isAdmin,\r\n\t\t\t\tdelete: isAdmin,\r\n\t\t\t},\r\n\t\t},\r\n\r\n\t\tisSingleton: true,\r\n\r\n\t\tfields: {\r\n\t\t\tcontent: document({\r\n\t\t\t\tformatting: true,\r\n\t\t\t\tlinks: true,\r\n\t\t\t\tdividers: true,\r\n\t\t\t}),\r\n\t\t},\r\n\t}),\r\n};\r\n", "import { text, timestamp } from \"@keystone-6/core/fields\";\r\nimport { Session } from \"./types\";\r\n\r\n// Helper function that limits an operation to admin users only\r\nexport const isAdmin = ({ session }: { session?: Session }): boolean => {\r\n\tif (!session || !session.data) {\r\n\t\treturn false;\r\n\t}\r\n\r\n\treturn session.data.isAdmin;\r\n};\r\n\r\nexport const slugResolveInputHook = async ({\r\n\tresolvedData,\r\n}: {\r\n\tresolvedData: any;\r\n}) => {\r\n\tif (resolvedData.name) {\r\n\t\treturn resolvedData.name\r\n\t\t\t.toLowerCase()\r\n\t\t\t.replace(/\\s+/g, \"-\") // Replace spaces with -\r\n\t\t\t.replace(/\\-\\-+/g, \"-\") // Replace multiple - with single -\r\n\t\t\t.replace(/^-+/, \"\") // Trim - from start of text\r\n\t\t\t.replace(/-+$/, \"\"); // Trim - from end of text\r\n\t}\r\n};\r\n\r\nexport const slugField = text({\r\n\tisIndexed: true,\r\n\tui: {\r\n\t\titemView: {\r\n\t\t\tfieldMode: \"hidden\",\r\n\t\t},\r\n\t\tcreateView: {\r\n\t\t\tfieldMode: \"hidden\",\r\n\t\t},\r\n\t},\r\n\thooks: {\r\n\t\tresolveInput: slugResolveInputHook,\r\n\t},\r\n});\r\n\r\nexport const createdAtNowField = timestamp({\r\n\tdefaultValue: \"1970-01-01T00:00:00.000Z\",\r\n\tui: {\r\n\t\titemView: {\r\n\t\t\tfieldMode: \"hidden\",\r\n\t\t},\r\n\t\tcreateView: {\r\n\t\t\tfieldMode: \"hidden\",\r\n\t\t},\r\n\t},\r\n\thooks: {\r\n\t\tresolveInput: async () => {\r\n\t\t\treturn new Date();\r\n\t\t},\r\n\t},\r\n});\r\n"],
  "mappings": "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",
  "names": ["import_core", "import_fields", "session", "dotenv"]
}
