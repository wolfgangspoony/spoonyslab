# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
  isAdmin: Boolean
  createdAt: DateTime
}

type PasswordState {
  isSet: Boolean!
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  isAdmin: BooleanFilter
  createdAt: DateTimeNullableFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  isAdmin: OrderDirection
  createdAt: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  isAdmin: Boolean
  createdAt: DateTime
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
  isAdmin: Boolean
  createdAt: DateTime
}

type Song {
  id: ID!
  title: String
  price: Float
  thumbnail: ImageFieldOutput
  songPreview: FileFieldOutput
  createdAt: DateTime
}

type ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  url: String!
}

enum ImageExtension {
  jpg
  png
  webp
  gif
}

type FileFieldOutput {
  filename: String!
  filesize: Int!
  url: String!
}

input SongWhereUniqueInput {
  id: ID
}

input SongWhereInput {
  AND: [SongWhereInput!]
  OR: [SongWhereInput!]
  NOT: [SongWhereInput!]
  id: IDFilter
  title: StringFilter
  price: FloatFilter
  createdAt: DateTimeNullableFilter
}

input FloatFilter {
  equals: Float
  in: [Float!]
  notIn: [Float!]
  lt: Float
  lte: Float
  gt: Float
  gte: Float
  not: FloatFilter
}

input SongOrderByInput {
  id: OrderDirection
  title: OrderDirection
  price: OrderDirection
  createdAt: OrderDirection
}

input SongUpdateInput {
  title: String
  price: Float
  thumbnail: ImageFieldInput
  songPreview: FileFieldInput
  createdAt: DateTime
}

input ImageFieldInput {
  upload: Upload!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input FileFieldInput {
  upload: Upload!
}

input SongUpdateArgs {
  where: SongWhereUniqueInput!
  data: SongUpdateInput!
}

input SongCreateInput {
  title: String
  price: Float
  thumbnail: ImageFieldInput
  songPreview: FileFieldInput
  createdAt: DateTime
}

type HomePage {
  id: ID!
  splash: ImageFieldOutput
  splashPortrait: ImageFieldOutput
}

input HomePageWhereUniqueInput {
  id: ID
}

input HomePageWhereInput {
  AND: [HomePageWhereInput!]
  OR: [HomePageWhereInput!]
  NOT: [HomePageWhereInput!]
  id: IDFilter
}

input HomePageOrderByInput {
  id: OrderDirection
}

input HomePageUpdateInput {
  splash: ImageFieldInput
  splashPortrait: ImageFieldInput
}

input HomePageUpdateArgs {
  where: HomePageWhereUniqueInput! = {id: 1}
  data: HomePageUpdateInput!
}

input HomePageCreateInput {
  splash: ImageFieldInput
  splashPortrait: ImageFieldInput
}

type SongsPage {
  id: ID!
  header: String
  featuredHeader: String
  featuredSongs(where: SongWhereInput! = {}, orderBy: [SongOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: SongWhereUniqueInput): [Song!]
  featuredSongsCount(where: SongWhereInput! = {}): Int
}

input SongsPageWhereUniqueInput {
  id: ID
}

input SongsPageWhereInput {
  AND: [SongsPageWhereInput!]
  OR: [SongsPageWhereInput!]
  NOT: [SongsPageWhereInput!]
  id: IDFilter
  header: StringFilter
  featuredHeader: StringFilter
  featuredSongs: SongManyRelationFilter
}

input SongManyRelationFilter {
  every: SongWhereInput
  some: SongWhereInput
  none: SongWhereInput
}

input SongsPageOrderByInput {
  id: OrderDirection
  header: OrderDirection
  featuredHeader: OrderDirection
}

input SongsPageUpdateInput {
  header: String
  featuredHeader: String
  featuredSongs: SongRelateToManyForUpdateInput
}

input SongRelateToManyForUpdateInput {
  disconnect: [SongWhereUniqueInput!]
  set: [SongWhereUniqueInput!]
  create: [SongCreateInput!]
  connect: [SongWhereUniqueInput!]
}

input SongsPageUpdateArgs {
  where: SongsPageWhereUniqueInput! = {id: 1}
  data: SongsPageUpdateInput!
}

input SongsPageCreateInput {
  header: String
  featuredHeader: String
  featuredSongs: SongRelateToManyForCreateInput
}

input SongRelateToManyForCreateInput {
  create: [SongCreateInput!]
  connect: [SongWhereUniqueInput!]
}

type AboutPage {
  id: ID!
  content: AboutPage_content_Document
}

type AboutPage_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input AboutPageWhereUniqueInput {
  id: ID
}

input AboutPageWhereInput {
  AND: [AboutPageWhereInput!]
  OR: [AboutPageWhereInput!]
  NOT: [AboutPageWhereInput!]
  id: IDFilter
}

input AboutPageOrderByInput {
  id: OrderDirection
}

input AboutPageUpdateInput {
  content: JSON
}

input AboutPageUpdateArgs {
  where: AboutPageWhereUniqueInput! = {id: 1}
  data: AboutPageUpdateInput!
}

input AboutPageCreateInput {
  content: JSON
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createSong(data: SongCreateInput!): Song
  createSongs(data: [SongCreateInput!]!): [Song]
  updateSong(where: SongWhereUniqueInput!, data: SongUpdateInput!): Song
  updateSongs(data: [SongUpdateArgs!]!): [Song]
  deleteSong(where: SongWhereUniqueInput!): Song
  deleteSongs(where: [SongWhereUniqueInput!]!): [Song]
  createHomePage(data: HomePageCreateInput!): HomePage
  createHomePages(data: [HomePageCreateInput!]!): [HomePage]
  updateHomePage(where: HomePageWhereUniqueInput! = {id: 1}, data: HomePageUpdateInput!): HomePage
  updateHomePages(data: [HomePageUpdateArgs!]!): [HomePage]
  deleteHomePage(where: HomePageWhereUniqueInput! = {id: 1}): HomePage
  deleteHomePages(where: [HomePageWhereUniqueInput!]!): [HomePage]
  createSongsPage(data: SongsPageCreateInput!): SongsPage
  createSongsPages(data: [SongsPageCreateInput!]!): [SongsPage]
  updateSongsPage(where: SongsPageWhereUniqueInput! = {id: 1}, data: SongsPageUpdateInput!): SongsPage
  updateSongsPages(data: [SongsPageUpdateArgs!]!): [SongsPage]
  deleteSongsPage(where: SongsPageWhereUniqueInput! = {id: 1}): SongsPage
  deleteSongsPages(where: [SongsPageWhereUniqueInput!]!): [SongsPage]
  createAboutPage(data: AboutPageCreateInput!): AboutPage
  createAboutPages(data: [AboutPageCreateInput!]!): [AboutPage]
  updateAboutPage(where: AboutPageWhereUniqueInput! = {id: 1}, data: AboutPageUpdateInput!): AboutPage
  updateAboutPages(data: [AboutPageUpdateArgs!]!): [AboutPage]
  deleteAboutPage(where: AboutPageWhereUniqueInput! = {id: 1}): AboutPage
  deleteAboutPages(where: [AboutPageWhereUniqueInput!]!): [AboutPage]
  endSession: Boolean!
  authenticateUserWithPassword(email: String!, password: String!): UserAuthenticationWithPasswordResult
  createInitialUser(data: CreateInitialUserInput!): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult = UserAuthenticationWithPasswordSuccess | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
  isAdmin: Boolean
}

type Query {
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  songs(where: SongWhereInput! = {}, orderBy: [SongOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: SongWhereUniqueInput): [Song!]
  song(where: SongWhereUniqueInput!): Song
  songsCount(where: SongWhereInput! = {}): Int
  homePages(where: HomePageWhereInput! = {id: {equals: 1}}, orderBy: [HomePageOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: HomePageWhereUniqueInput): [HomePage!]
  homePage(where: HomePageWhereUniqueInput! = {id: 1}): HomePage
  homePagesCount(where: HomePageWhereInput! = {id: {equals: 1}}): Int
  songsPages(where: SongsPageWhereInput! = {id: {equals: 1}}, orderBy: [SongsPageOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: SongsPageWhereUniqueInput): [SongsPage!]
  songsPage(where: SongsPageWhereUniqueInput! = {id: 1}): SongsPage
  songsPagesCount(where: SongsPageWhereInput! = {id: {equals: 1}}): Int
  aboutPages(where: AboutPageWhereInput! = {id: {equals: 1}}, orderBy: [AboutPageOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AboutPageWhereUniqueInput): [AboutPage!]
  aboutPage(where: AboutPageWhereUniqueInput! = {id: 1}): AboutPage
  aboutPagesCount(where: AboutPageWhereInput! = {id: {equals: 1}}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
  isSingleton: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  isNonNull: [KeystoneAdminUIFieldMetaIsNonNull!]
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

enum KeystoneAdminUIFieldMetaIsNonNull {
  read
  create
  update
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
